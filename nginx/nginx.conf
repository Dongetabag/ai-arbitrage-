# Nginx Configuration for AI Arbitrage Platform
# Reverse proxy for Python API, NestJS API, and React Frontend

events {
    worker_connections 1024;
}

http {
    upstream python_api {
        server python-api:8000;
    }

    upstream nestjs_api {
        server nestjs-api:3001;
    }

    upstream frontend {
        server frontend:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=1000r/m;

    server {
        listen 80;
        server_name localhost;

        client_max_body_size 10M;

        # Frontend (React/Next.js)
        location / {
            limit_req zone=general_limit burst=20;
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Python FastAPI
        location /api/python/ {
            limit_req zone=api_limit burst=50;
            rewrite ^/api/python/(.*) /api/$1 break;
            proxy_pass http://python_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # NestJS API
        location /api/nestjs/ {
            limit_req zone=api_limit burst=50;
            rewrite ^/api/nestjs/(.*) /api/$1 break;
            proxy_pass http://nestjs_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # WebSocket for real-time updates
        location /ws/ {
            proxy_pass http://python_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTPS configuration (for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # ... same location blocks as above
    # }
}

