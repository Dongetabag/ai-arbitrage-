apiVersion: v1
kind: Namespace
metadata:
  name: arbitrage-system

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: arbitrage-config
  namespace: arbitrage-system
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  REDIS_URL: "redis://redis-service:6379/0"
  DATABASE_URL: "postgresql://postgres:5432/arbitrage_db"
  MONGODB_URI: "mongodb://mongodb-service:27017/arbitrage_db"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: arbitrage-secrets
  namespace: arbitrage-system
type: Opaque
stringData:
  OPENAI_API_KEY: "your-openai-key-here"
  KEEPA_API_KEY: "your-keepa-key-here"
  # Add other secrets

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: arbitrage-system
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: arbitrage_db
        - name: POSTGRES_USER
          value: arbitrage_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: arbitrage-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: arbitrage-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: arbitrage-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: arbitrage-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: arbitrage-system
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: arbitrage-system
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP

---
# Main Python API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: arbitrage-api
  namespace: arbitrage-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: arbitrage-api
  template:
    metadata:
      labels:
        app: arbitrage-api
    spec:
      containers:
      - name: api
        image: your-registry/arbitrage-api:latest
        ports:
        - containerPort: 8000
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: arbitrage-config
              key: ENVIRONMENT
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: arbitrage-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: arbitrage-config
              key: REDIS_URL
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: arbitrage-secrets
              key: OPENAI_API_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: arbitrage-api-service
  namespace: arbitrage-system
spec:
  selector:
    app: arbitrage-api
  ports:
  - port: 80
    targetPort: 8000
  type: LoadBalancer

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: arbitrage-system
spec:
  replicas: 5
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: worker
        image: your-registry/arbitrage-api:latest
        command: ["celery", "-A", "tasks.celery", "worker", "--loglevel=info", "--concurrency=10"]
        envFrom:
        - configMapRef:
            name: arbitrage-config
        - secretRef:
            name: arbitrage-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Celery Beat (Scheduler)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: arbitrage-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: beat
        image: your-registry/arbitrage-api:latest
        command: ["celery", "-A", "tasks.celery", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: arbitrage-config
        - secretRef:
            name: arbitrage-secrets

---
# HorizontalPodAutoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: arbitrage-api-hpa
  namespace: arbitrage-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: arbitrage-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: arbitrage-ingress
  namespace: arbitrage-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - api.arbitrage.com
    - dashboard.arbitrage.com
    secretName: arbitrage-tls
  rules:
  - host: api.arbitrage.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: arbitrage-api-service
            port:
              number: 80
  - host: dashboard.arbitrage.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

