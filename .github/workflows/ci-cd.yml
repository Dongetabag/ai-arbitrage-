name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-python:
    name: Test Python Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        pip install flake8 black mypy
    
    - name: Run Black formatter check
      run: black --check .
    
    - name: Run Flake8
      run: flake8 . --max-line-length=120 --exclude=venv,__pycache__
    
    - name: Run MyPy type checking
      run: mypy . --ignore-missing-imports

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-python, lint-python]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Python API image
      run: |
        docker build -t arbitrage-api:${{ github.sha }} .
    
    - name: Build NestJS API image
      run: |
        docker build -t arbitrage-nestjs:${{ github.sha }} -f backend-nestjs/Dockerfile backend-nestjs/
    
    - name: Build Frontend image
      run: |
        docker build -t arbitrage-frontend:${{ github.sha }} -f frontend/Dockerfile frontend/
    
    - name: Test containers
      run: |
        docker-compose up -d
        sleep 10
        curl -f http://localhost:8000/api/health || exit 1
        docker-compose down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
    
    - name: Build and push images
      run: |
        docker build -t ${{ secrets.ECR_REGISTRY }}/arbitrage-api:staging .
        docker push ${{ secrets.ECR_REGISTRY }}/arbitrage-api:staging
    
    - name: Deploy to ECS Staging
      run: |
        aws ecs update-service --cluster arbitrage-staging --service api --force-new-deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Build and push images
      run: |
        docker build -t ${{ secrets.ECR_REGISTRY }}/arbitrage-api:${{ github.sha }} .
        docker build -t ${{ secrets.ECR_REGISTRY }}/arbitrage-api:latest .
        docker push ${{ secrets.ECR_REGISTRY }}/arbitrage-api:${{ github.sha }}
        docker push ${{ secrets.ECR_REGISTRY }}/arbitrage-api:latest
    
    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/arbitrage-api arbitrage-api=${{ secrets.ECR_REGISTRY }}/arbitrage-api:${{ github.sha }}
        kubectl rollout status deployment/arbitrage-api
    
    - name: Health check
      run: |
        sleep 30
        curl -f https://api.arbitrage.com/health || exit 1
    
    - name: Notify deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸš€ Production deployment successful - ${{ github.sha }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

